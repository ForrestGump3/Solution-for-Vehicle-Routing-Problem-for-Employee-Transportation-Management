from pprint import pprint

print("maximum distance per day for bus by default is 92km.")
print("capacity of bus by default is 32")
print("opetating time for buses is 6:15 to 7:35")
print("Algorithm minimise total distance traveled by all buses considering operational time capacity of bus and kmtrip/day")
print(".")
print(".")
print("1. if 85% occupency is required 2.otherwise")
occupency = input()
if 1==1:
    if int(occupency)==2 :
        max_number = 32
    else :
        max_number = 28
    from cluster import clusters
    from pprint import pprint

    '''
	Test file to check working of clusters.
    '''

    distances = [[0,31753,21900,21900,31743,31743,31743,31743,31743,30910,30910,28906,30519,30446,30446,30446,30446,30446,32494,30013,21905,35219,23179,23187,28477,35222,32552,35442,19304,17223],
[32948,0,6285,6285,1580,1580,1580,1580,1580,1064,1064,3242,1160,4154,4154,4154,4154,4154,741,1681,6926,3574,6716,6724,4755,3547,927,4552,14156,11216],
[22354,6294,0,0,6737,6737,6737,6737,6737,5904,5904,7880,5513,6169,6169,6169,6169,6169,7035,4971,5674,9756,1713,1721,4726,9677,7088,10970,4940,4380],
[22354,6294,0,0,6737,6737,6737,6737,6737,5904,5904,7880,5513,6169,6169,6169,6169,6169,7035,4971,5674,9756,1713,1721,4726,9677,7088,10970,4940,4380],
[33030,1692,6925,6925,0,0,0,0,0,1267,1267,3324,1242,4236,4236,4236,4236,4236,1183,1763,7008,4211,7356,7364,5395,4184,2491,4168,14238,11298],
[33030,1692,6925,6925,0,0,0,0,0,1267,1267,3324,1242,4236,4236,4236,4236,4236,1183,1763,7008,4211,7356,7364,5395,4184,2491,4168,14238,11298],
[33030,1692,6925,6925,0,0,0,0,0,1267,1267,3324,1242,4236,4236,4236,4236,4236,1183,1763,7008,4211,7356,7364,5395,4184,2491,4168,14238,11298],
[33030,1692,6925,6925,0,0,0,0,0,1267,1267,3324,1242,4236,4236,4236,4236,4236,1183,1763,7008,4211,7356,7364,5395,4184,2491,4168,14238,11298],
[33030,1692,6925,6925,0,0,0,0,0,1267,1267,3324,1242,4236,4236,4236,4236,4236,1183,1763,7008,4211,7356,7364,5395,4184,2491,4168,14238,11298],
[32539,1115,6236,6236,1253,1253,1253,1253,1253,0,0,2833,751,3745,3745,3745,3745,3745,1856,1272,6517,4611,6667,6675,4706,4584,1914,5589,13747,10807],
[32539,1115,6236,6236,1253,1253,1253,1253,1253,0,0,2833,751,3745,3745,3745,3745,3745,1856,1272,6517,4611,6667,6675,4706,4584,1914,5589,13747,10807],
[30216,3337,7942,7942,3327,3327,3327,3327,3327,2494,2494,0,2103,2030,2030,2030,2030,2030,4078,1597,4194,6833,4944,4936,7040,6806,4136,6956,11424,8484],
[31810,1276,5514,5514,1266,1266,1266,1266,1266,433,433,2104,0,3016,3016,3016,3016,3016,2017,543,5788,4772,5945,5953,4979,4745,2075,4853,13018,10078],
[32036,4085,6169,6169,4075,4075,4075,4075,4075,3242,3242,3306,2851,0,0,0,0,0,4826,2345,5289,7581,4456,4448,7788,7554,4884,7704,13244,9579],
[32036,4085,6169,6169,4075,4075,4075,4075,4075,3242,3242,3306,2851,0,0,0,0,0,4826,2345,5289,7581,4456,4448,7788,7554,4884,7704,13244,9579],
[32036,4085,6169,6169,4075,4075,4075,4075,4075,3242,3242,3306,2851,0,0,0,0,0,4826,2345,5289,7581,4456,4448,7788,7554,4884,7704,13244,9579],
[32036,4085,6169,6169,4075,4075,4075,4075,4075,3242,3242,3306,2851,0,0,0,0,0,4826,2345,5289,7581,4456,4448,7788,7554,4884,7704,13244,9579],
[32036,4085,6169,6169,4075,4075,4075,4075,4075,3242,3242,3306,2851,0,0,0,0,0,4826,2345,5289,7581,4456,4448,7788,7554,4884,7704,13244,9579],
[32909,514,6735,6735,1183,1183,1183,1183,1183,1025,1025,3203,1121,4115,4115,4115,4115,4115,0,1642,6887,3518,7166,7174,5205,3491,1377,4496,14117,11177],
[31323,1776,4971,4971,1766,1766,1766,1766,1766,933,933,1617,542,2529,2529,2529,2529,2529,2517,0,5301,5272,5402,5410,5479,5245,2575,5395,12531,9591],
[21478,8013,8160,8160,8003,8003,8003,8003,8003,7170,7170,5166,6779,6706,6706,6706,6706,6706,8754,6273,0,11509,5220,5228,13037,11482,8812,13754,5564,4290],
[36487,3539,9609,9609,3396,3396,3396,3396,3396,4603,4603,6781,4699,7693,7693,7693,7693,7693,3507,5220,10465,0,10040,10048,8079,93,3911,1402,17695,13753],
[23632,6754,1713,1713,6641,6641,6641,6641,6641,5808,5808,6458,5417,4456,4456,4456,4456,4456,7495,5431,4252,10250,0,8,5186,10223,7548,12207,6218,5658],
[23640,6762,1721,1721,6633,6633,6633,6633,6633,5800,5800,6466,5409,4448,4448,4448,4448,4448,7503,4903,4260,10258,8,0,5194,10231,7556,12215,6226,5666],
[28552,5411,3874,3874,6991,6991,6991,6991,6991,5353,5353,7564,6571,6954,6954,6954,6954,6954,6152,5947,10666,9402,4909,4917,0,9323,6205,10616,9734,9018],
[36460,3512,9733,9733,3369,3369,3369,3369,3369,4576,4576,6754,4672,7666,7666,7666,7666,7666,3480,5193,10438,99,10164,10172,8222,0,3732,1309,17668,14728],
[34552,1615,6212,6212,3184,3184,3184,3184,3184,2668,2668,4846,2764,5758,5758,5758,5758,5758,2345,3285,8530,3874,6643,6651,4682,3795,0,5088,15760,10356],
[36791,4356,10739,10739,4452,4452,4452,4452,4452,5562,5562,7085,5129,7888,7888,7888,7888,7888,4324,5672,10769,1146,11170,11178,9209,1119,5219,0,17999,15059],
[19758,13758,4940,4940,13748,13748,13748,13748,13748,12915,12915,10911,12524,12451,12451,12451,12451,12451,14499,12018,6419,16439,6219,6227,10494,16360,14557,17653,0,1784],
[18484,11082,4380,4380,11072,11072,11072,11072,11072,10239,10239,8235,9848,9775,9775,9775,9775,9775,11823,9342,4946,14548,5659,5667,9257,14551,11881,14771,1784,0]]



    #max_allowed_dist = 42000
    print("maximum allowed distance")
    max_allowed_dist = int(input())
    number_of_buses = 10
    sink_final = 0
    final = [3,4]
    #max_number = 32

    for i in range(1,20):
        source, sink = 0, i
        pickup_points = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
        #pickup_points = [0,17,15,11,3,8,1,6,16,9,4,5,7,14,2,12,13,10,18,19]
        #pickup_points = [0,18,19,10,13,12,2,14,7,5,4,9,16,6,1,8,3,11,15,17]
        #pickup_points = [0,19,18,10,2,12,13,14,5,6,9,7,4,8,1,3,16,15,11,17]
        try:
            ans = clusters(distances, source, sink, pickup_points, max_number, max_allowed_dist)
        except:
            continue

        #print(len(ans))
        if number_of_buses > len(ans):
            sink_final = i
            number_of_buses = len(ans)
            final = clusters(distances, source, sink, pickup_points, max_number, max_allowed_dist)
            #print(sink)
            #print(final)


        # prints all clusters in order of path
    print("total no. of buses required are ")
    print(number_of_buses)
    print("all buses should start from point")
    print(sink_final)
    print("below are routes that buses should follow")
    pprint(final)
    #for cluster in ans:
    #    pprint(cluster)



#print("1.If you want to give time window as input 2.otherwise")
#tw = input()
